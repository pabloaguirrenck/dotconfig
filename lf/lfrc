#============================================================
# LF USER CONFIGURATION FILE
# OWNERSHIP: USER
# PABLO AGUIRRE NUNEZ
#============================================================

#------------------------------------------------------------
# BEGINNING OF LFRC CONFIGURATION FILE
#------------------------------------------------------------

#============================================================
# Help
#============================================================

#------------------------------------------------------------
# Variables exported to shell
#------------------------------------------------------------
#$f   current file
#$fs  selected file(s) separated with 'filesep'
#$fx  current file or selected file(s) if any
#$id  id number of the client

#============================================================
# General config
#============================================================
# Interpreter for shell commands (needs to be POSIX compatible)
set shell sh


# Display & generals
set drawbox true
set icons true
set ignorecase true

# Set image preview
set preview on

# Set pistol as file previewer
set previewer ~/.config/lf/scripts/previewer

# Shell options (stdout, stderr)
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands
set ifs "\n"

# Leave some space at the top and the bottom of the screen
set scrolloff 5

# Always display directory & file size
set info size

# Use enter for shell commands
map <enter> shell

# Execute current file (must be executable)
map x $$f
map X !$f

# Delete file or folder (displays confirmation, can delete visual selection)
map D :delete $fx

#------------------------------------------------------------
# Video manipulation keybindings
#------------------------------------------------------------
# (Transcode) - mp4 to mkv with soft subs
map t

# Transcode Merge
map tweb mergewebm
map tmp4 mergemp4
map tmkv mergemkv
map tavi mergeavi

# Transcode convert
map tconv convmp4

# Transcode Add Sub Metadata
map tmsb addsubmdt

# Add english subs mkv and srt files
map tads addengsubs

# Offset subs by seconds, determined by number on begining of line
map toffs offsetsubs

cmd mergewebm ${{
  set -fx
  vid=$(echo "$fx" | grep ".webm")
  sub=$(echo "$fx" | grep ".srt")
  ffmpeg -i "$vid" -f srt -i "$sub" -map 0:0 -map 0:1 -map 1:0 -c:v copy -c:a copy -c:s srt output.mkv
}}

cmd mergemp4 ${{
  set -fx
  vid=$(echo "$fx" | grep ".mp4")
  sub=$(echo "$fx" | grep ".srt")
  ffmpeg -i "$vid" -f srt -i "$sub" -map 0:0 -map 0:1 -map 1:0 -c:v copy -c:a copy -c:s srt output.mkv
}}

cmd mergemkv ${{
  set -fx
  vid=$(echo "$fx" | grep ".mkv")
  sub=$(echo "$fx" | grep ".srt")
  ffmpeg -i "$vid" -f srt -i "$sub" -map 0:0 -map 0:1 -map 1:0 -c:v copy -c:a copy -c:s srt output.mkv
}}

cmd mergeavi ${{
  set -fx
  vid=$(echo "$fx" | grep ".avi")
  sub=$(echo "$fx" | grep ".srt")
  ffmpeg -fflags +genpts -i "$vid" -c:v copy -c:a copy output_unmerged.mkv
  vidm=$(echo "$fx" | grep ".mkv")
  ffmpeg -i "$vidm" -f srt -i "$sub" -map 0:0 -map 0:1 -map 1:0 -c:v copy -c:a copy -c:s srt output.mkv
}}

cmd convmp4 ${{
  set -fx
  vid=$(echo "$fx" | grep ".mp4")
  ffmpeg -i "$vid" -sn -vcodec copy -acodec copy output.mkv
}}

cmd addsubmdt ${{
  set -fx
  mkvid=$(echo "$fx" | grep ".mkv")
  ffmpeg -i "$mkvid" -metadata:s:s:0 language=eng -c copy "output_merged.mkv"
}}

cmd addengsubs ${{
  set -fx
  vid=$(echo "$fx" | grep ".mkv")
  sub=$(echo "$fx" | grep ".srt")
  mkvmerge -o "$vid"+"d" "$vid" --language 0:eng --track-name 0:English "$sub" 
}}

cmd offsetsubs ${{
  set -fx
  newsub=$(echo "d"+"$fx")
  ffmpeg -itsoffset 1 -i "$fx" -c copy $fx.srt
}}

#------------------------------------------------------------
# Audio manipulation keybindings
#------------------------------------------------------------
map tmsv mergemkvflac
# Merge mkv video with flac audio

cmd mergemkvflac ${{
  set -fx
  vid=$(echo "$fx" | grep ".mkv")
  aud=$(echo "$fx" | grep ".flac")
  #ffmpeg -i "$vid" -i "$aud" -c:v copy -c:a copy $fx.mkv
  #mkvmerge -o output-with-sound.m -A input-video.mkv soundfile.mp3
  mkvmerge -o "$vid"+"d" -A "$vid" "$aud"
}}


#------------------------------------------------------------
# General keybindings
#------------------------------------------------------------
map <esc>
map <esc> cmd-escape

map zh
map . set hidden!

#------------------------------------------------------------
# Sort keybindings
#------------------------------------------------------------
map s
map sn :set sortby natural; set info size
map ss :set sortby size; set info size
map st :set sortby time; set info time

#------------------------------------------------------------
# Edit mode [edit, view, set] (e)
#------------------------------------------------------------
# sxiv image viewer on thumbnail mode
map e

map et &sxiv -t * "$fx"
map ep &sxiv * "$fx"
map ee $$EDITOR "$fx"
map es $sudo $EDITOR "$fx"
map ev $bat "$fx"
map ew setwallpaper

# Set wallpaper rewritting 
cmd setwallpaper ${{
  cp "$fx" ~/.config/wallpapers/wall.png && feh --bg-fill --no-fehbg "$fx"
}}

#------------------------------------------------------------
# lf new windows
#------------------------------------------------------------
# Open new lf window on current dir
map <c-n>
map <c-n> push &~/bin/start_scripts/start_lf<enter>

#------------------------------------------------------------
# Making new dirs and files (m)
#------------------------------------------------------------
# Unmap the default mapping so the rest of the following mapping won't collide
map m

# Create new dir, prompt on new screen
map md mkdir

# Create new file, prompt on new screen
map mf mkfile

# Create new file as root, rompt on new screen
map mr sudomkfile

# Create new dir(s), prompt on bottom of screen (space between words results in two dirs)
#map md push %mkdir<space>

# Function creates new dir as user
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

# Function creates new dir as root
cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# Function creates new file as user
cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

#------------------------------------------------------------
# Renaming Files
#------------------------------------------------------------
# Unmap the default mapping so the rest of the following mapping won't collide
map r

# Simple rename
map rr rename
cmd renamea %[ -e $1 ] && printf "file exists" || mv $f $1
map ra push :renamea<space>

#------------------------------------------------------------
# cd navigation (g)
#------------------------------------------------------------
# Unmap the default mapping so the rest of the following mapping won't collide
map g

# Go to .config
map gc cd /home/pabloagnck/.config

# Go to Documents
map gx cd /home/pabloagnck/Documents

# Go to Pictures
map gp cd /home/pabloagnck/Pictures

# Go to Downloads
map gd cd /home/pabloagnck/Downloads

# Go to script files dir
map gb cd /home/pabloagnck/bin

# Go to 60GB
map g6 cd /run/media/pabloagnck/60GB

# Go to 604B Blue
map gb cd /run/media/pabloagnck/64GB

map gw cd /run/media/pabloagnck/60GB/Personal/Projects/Website

# cd's into 750GB HDD drive directory
map g7 cd /media/pabloagnck/750GB

# cd's into 8TB HDD drive directory
map g8 cd /media/pabloagnck/WD8TI

# cd's into 2TB HDD drive directory
map g2 cd /media/pabloagnck/2TB

# Go to home
map gh cd ~

# Go to /etc
map ge cd /etc

# Go to /usr
map gu cd /usr

#------------------------------------------------------------
# Yank
#------------------------------------------------------------
# Unmap the default mapping so the rest of the following mapping won't collide
map y

# Map yy to original copy
map yy copy

# Map ys to sudo copy
#map ys %sudo cp $fx

# Yank path with filename
map yp yank_path

# Yank filename
map yn yank_name

# Yank dir path
map yd yank_dir

# Function yanks path incuding filename
cmd yank_path ${{
    set -f
    readlink -f $f | xclip -selection clipboard
}}

# Function yanks filename
cmd yank_name ${{
    set -fx
    basename "$(readlink -f "$fx")" | tr '\n' ' ' | xclip -selection clipboard 
}}

# Function yanks selected path no filename
cmd yank_dir ${{
    echo -n $fx | xclip -selection clipboard
}}

#------------------------------------------------------------
# Open files
#------------------------------------------------------------
# Open files on enter
map <enter>
map <enter> open

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
#        video/*|image/*/application/pdf) mimeopen "$f" & disown;;
        *) xdg-open "$f" ;;
    esac
}}

# Ask for application when opening file
map o $mimeopen --ask $f

#------------------------------------------------------------
# File permissions (bit mode)
#------------------------------------------------------------
# Give permissions to selected file
map c
map chh chmod
map chr chmodrec

cmd chmod ${{
  printf "Mode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
}}

cmd chmodrec ${{
  printf "Mode Bits: "
  read ans
  for file in "$fx"
  do
    chmod -R $ans $file
  done
}}

map br
map br batchrename

cmd batchrename ${{
qmv -f do
}}

#------------------------------------------------------------
# Archive [File Extraction & Compression (a)]
#------------------------------------------------------------
# Extract the current file with the right command
map a
map au extract
map az zip
map at tar
map ag targz
map ab tarbz2

cmd extract ${{
    case "$fx" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $fx;;
        *.tar.gz|*.tgz) tar xzvf $fx;;
        *.tar.xz|*.txz) tar xJvf $fx;;
        *.zip) unzip $fx;;
        *.rar) unrar x $fx;;
        *.7z) 7z x $fx;;
    esac
}}

# Compress current file or selected files
cmd zip %zip -r "$fx" "$fx"
cmd tar %tar cvf "$fx.tar" "$fx"
cmd targz %tar cvzf "$fx.tar.gz" "$fx"
cmd tarbz2 %tar cjvf "$fx.tar.bz2" "$fx"

#------------------------------------------------------------
# Fzf configuration
#------------------------------------------------------------
# Open fzf with f keybinding (Allow direct edit with nvim on enter file)
map f
map fe $(~/.config/zsh/custom_funs/fe)

# Open fzf in jump mode (will jump to dir on enter)
map fd fzf_jump

# Navigate to folders with fzf with ctrl + f keybinding
cmd fzf_jump ${{
   res="$(find . -maxdepth 2 | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}

# Set vim filetype
# vim: set ft=conf:

#------------------------------------------------------------
# END OF LFRC CONFIGURATION FILE
#------------------------------------------------------------
